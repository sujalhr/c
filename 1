#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX 100

int stack[MAX];
int top = -1;

// Function prototypes
void push(int element);
int pop();
bool isPalindrome();
void displayStatus();
void displayStack();
bool isFull();
bool isEmpty();

int main() {
    int choice, element;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Push an Element\n");
        printf("2. Pop an Element\n");
        printf("3. Check Palindrome\n");
        printf("4. Display Stack Status\n");
        printf("5. Display Stack\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter element to push: ");
                scanf("%d", &element);
                push(element);
                break;
            case 2:
                element = pop();
                if (element != -1)
                    printf("Popped element: %d\n", element);
                break;
            case 3:
                if (isPalindrome())
                    printf("The stack elements form a palindrome.\n");
                else
                    printf("The stack elements do not form a palindrome.\n");
                break;
            case 4:
                displayStatus();
                break;
            case 5:
                displayStack();
                break;
            case 6:
                exit(0);
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    }

    return 0;
}

void push(int element) {
    if (isFull()) {
        printf("Stack Overflow. Cannot push element.\n");
    } else {
        top++;
        stack[top] = element;
        printf("Element %d pushed onto the stack.\n", element);
    }
}

int pop() {
    if (isEmpty()) {
        printf("Stack Underflow. Cannot pop element.\n");
        return -1;
    } else {
        int poppedElement = stack[top];
        top--;
        return poppedElement;
    }
}

bool isPalindrome() {
    if (isEmpty()) {
        printf("Stack is empty. Cannot check palindrome.\n");
        return false;
    }

    int i, j;
    for (i = 0, j = top; i < j; i++, j--) {
        if (stack[i] != stack[j]) {
            return false;
        }
    }
    return true;
}

void displayStatus() {
    printf("Stack Status:\n");
    printf("Top: %d\n", top);
    if (isEmpty())
        printf("Stack is empty.\n");
    else if (isFull())
        printf("Stack is full.\n");
    else
        printf("Stack is neither empty nor full.\n");
}

void displayStack() {
    if (isEmpty()) {
        printf("Stack is empty.\n");
    } else {
        printf("Stack elements: ");
        for (int i = 0; i <= top; i++) {
            printf("%d ", stack[i]);
        }
        printf("\n");
    }
}

bool isFull() {
    return top == MAX - 1;
}

bool isEmpty() {
    return top == -1;
}

